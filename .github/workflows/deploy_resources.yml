name: deploy-sam-application

on:
  push:
    branches:
      - feature-*
      - main

jobs:
  setEnv:
    runs-on: ubuntu-latest
    outputs:
      EnvName: ${{ steps.setEnv.outputs.EnvName }}
    steps:
      - id: setEnv
        run: |
          if ${{ !startsWith(github.ref_name, 'feature-')}}; then
            echo "EnvName=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          else
            echo "EnvName=develop" >> $GITHUB_OUTPUT
          fi
  
  deploy-bucket:
    runs-on: ubuntu-latest
    needs: setEnv
    environment:
      name: ${{needs.setEnv.outputs.EnvName}}
    steps:
      - name: checkoout
        uses: actions/checkout@v2

      - name: python setup
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - uses: aws-actions/setup-sam@v2
        with:
          version: 1.59.0
      
      #AWS環境への認証
      - name: aws configure
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      
      # deployBucketの生成
      - name: Create DeployBucket
        uses: ./.github/actions/deployBucket
      
  deploy-app:
    runs-on: ubuntu-latest
    needs: 
      - setEnv
      - deploy-bucket
    environment:
      name: ${{needs.setEnv.outputs.EnvName}}
    steps:
      - name: checkoout
        uses: actions/checkout@v2

      - name: python setup
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - uses: aws-actions/setup-sam@v2
        with:
          version: 1.59.0

      - name: make swagger
        run: |
          npm install -g @apidevtools/swagger-cli
          swagger-cli bundle ./resourses/app_api/swagger/openapi.yaml -r --outfile openapi.yaml --type yaml
          swagger-cli bundle ./resourses/stream_api/swagger/openapi.yaml -r --outfile stream_openapi.yaml --type yaml

      #AWS環境への認証
      - name: aws configure
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      # Parameter override用の変数ファイルの作成
      # - name: generate .samEnv
      #   run: |
      #     echo EnvName=${GITHUB_REF#refs/heads/} >> .samEnv
      #     echo AuthApiPath=${{ secrets.AUTH_API_PATH }} >> .samEnv
      #     echo AuthServiceApiPath=${{ secrets.AUTH_SERVICE_API_PATH }} >> .samEnv
      #     echo AuthServiceApiHost=${{ secrets.AUTH_SERVICE_API_HOST }} >> .samEnv
      #     echo AuthServiceApiAccessKey=${{ secrets.AUTH_SERVICE_API_ACCESS_KEY }} >> .samEnv
      #     echo AuthServiceApiSercretAccessKey=${{secrets.AUTH_SERVICE_API_SERCRET_ACCESS_KEY }} >> .samEnv
      #     echo NotifySource=${{secrets.NOTIFY_SOURCE }} >> .samEnv
      #     echo StreamApiId=${{ secrets.STREAM_API_ID }} >> .samEnv
      #     echo StreamApiPw=${{ secrets.STREAM_API_PW }} >> .samEnv

      #     if ${{ needs.setEnv.outputs.EnvName == 'production' }}; then
      #       echo "set Production Only Variables"
      #       echo AppApiAcmArn=${{ secrets.APP_ACM_ARN }} >> .samEnv
      #       echo StreamApiAcmArn=${{ secrets.STREAM_ACM_ARN }} >> .samEnv
      #     fi

      # lambda layerフォルダを作成
      # - name: Create lambda layer
      #   run: |
      #     mkdir -p layer/python
      #     mv utils/ layer/python
      #     pip install -qr layer/python/utils/requirements.txt --target layer/python
      #   working-directory: ./src

      # sam build
      - name: sam build
        uses: ./.github/actions/sam-build

      # sam deploy
      - name: sam deploy
        uses: ./.github/actions/sam-deploy
