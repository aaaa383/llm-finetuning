---
swagger: "2.0"
info:
  description: "LLM"
  version: "2020-08-24T09:41:19Z"
  title: "LLM APP"
basePath: "/"
schemes:
  - "https"
paths:
  /chat:
    get:
      summary: "チャット履歴取得API"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "name"
          description: "チャットをした人物"
          in: "query"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ChatResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetChat.Arn}/invocations
        httpMethod: "POST"
        responses:
          ".*statusCode.*: 400.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          ".*statusCode.*: 500.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
    post:
      summary: "チャット登録API"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ChatResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostChat.Arn}/invocations
        httpMethod: "POST"
        responses:
          ".*statusCode.*: 400.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          ".*statusCode.*: 500.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
  
  /chat/{uuid}:
    put:
      summary: "カメラ情報変更API"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "uuid"
          description: "変更対象のカメラのuuid"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ChatResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutChat.Arn}/invocations
        httpMethod: "POST"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*statusCode.*:.*500.*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*statusCode.*:.*400.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "uuid"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
  
definitions:
  Empty:
    type: "object"
    title: "Empty Schema"
 
  ChatResponse:
    type: "object"
    properties:
      results:
        type: "array"
        items:
          type: "object"
          properties:
            uuid:
              type: "string"
            timestamp:
              type: "string"
            name:
              type: "string"
            userInput:
              type: "string"
            response:
              type: "string"
            fixResponse:
              type: "string"
            
x-amazon-apigateway-gateway-responses:
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
    responseTemplates:
      application/json: '{"message":$context.error.messageString}'
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
    responseTemplates:
      application/json: '{"message":$context.error.messageString}'
x-amazon-apigateway-request-validators:
  basic:
    validateRequestParameters: true
    validateRequestBody: true
x-amazon-apigateway-request-validator : basic